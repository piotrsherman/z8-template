import org.zenframework.z8.base.form.Listbox;
import org.zenframework.z8.base.form.Tab;
import org.zenframework.z8.base.form.TabControl;
import org.zenframework.z8.base.table.Table;
import org.zenframework.z8.base.table.value.DatetimeField;
import org.zenframework.z8.base.table.value.Field;
import org.zenframework.z8.base.table.value.Link;
import org.zenframework.z8.taskmanager.model.History;
import org.zenframework.z8.taskmanager.model.Task;

[entry]
[displayName "Задачи"]
public class Tasks extends Task {

	[displayName "Наименование"] name;
	[displayName "Проект"] project.name;
	[displayName "Описание"] description;
	[displayName "Сложность"] difficulty;
	[displayName "Срок исполнения"] deadLine;
	[displayName "Выполнил"] finishedAt;
	[displayName "Создатель"] creator.name;
	[displayName "Исполнитель"] executor.name;
	[displayName "Идентификатор"] id;

	description.flex = 1;
	finishedAt.readOnly = true;

	public History history;
	[displayName "История изменений"] private Listbox historyList;

	historyList.query = history;
	historyList.link = history.taskId;
	historyList.columns = { history.createdAt, history.user.name, history.changedElement, history.newValue};
	historyList.sortFields = { history.createdAt };
	historyList.colSpan = 2;
	historyList.flex = 1;

	virtual protected void beforeRead(){
		super.beforeRead();

		addWhere(user().id == project.person.userId);
	}

	virtual protected void afterUpdate(guid recordId) {
		super.afterUpdate(recordId);

		if (description.isChanged())
			return;

		History history;
		history.taskId = recordId;
		history.userId = user().id;

		for (Field field : primaryFields()) {
			if (!field.isChanged())
				continue;

			if (field instanceof Link) {
				Link link = (Link) field;
				Table table = linkedTables[link];
				if (!table.readRecord(link.get(), Field[] { table.name }))
					throw "Запись '" + link.get() + "' в таблице " + table.name() + " не существует";
				history.changedElement = table.name.displayName();
				history.newValue = table.name.get();

			} else {
				history.changedElement = field.displayName();
				if (field instanceof DatetimeField) {
					DatetimeField datetimeField = (DatetimeField) field;
					history.newValue = datetimeField.get() != date.Min ? datetimeField.get().toString("dd.MM.YYYY hh:mm") : "";
				} else {
					history.newValue = field.toString();
				}
			}
		}

		history.create();
	}

	virtual protected void onUpdateAction(guid recordId) {
		super.onUpdateAction(recordId);

		if(!readRecord(recordId, Field[] { executorId, creatorId }))
			throw "Задача '" + recordId + "' не существует";
	
		if(creatorId.get() != user().id && executorId.get() != user().id)
			throw "Рекдактировать задачу может только создатель или исполнитлель";
	}

	virtual protected void onDestroyAction(guid recordId) {
		super.onDestroyAction(recordId);

		if(!readRecord(recordId, Field[] { executorId, creatorId }))
			throw "Задача '" + recordId + "' не существует";

		if(creatorId.get() != user().id)
			throw "Удалить задачу может только создатель";

		history.destroy(history.taskId == recordId);
	}

	[displayName "История"]
	public Tab historyTab;
	historyTab.controls = { historyList } ;

	[displayName "Задача"]
	public Tab taskTab;	
	taskTab.controls = { name, id, project.name, status.name, difficulty, deadLine, finishedAt, creator.name, executor.name, description } ;
	taskTab.flex = 2;

	public TabControl taskTabs;
	taskTabs.tabs = { taskTab, historyTab };
	taskTabs.flex = 1;
	colCount = 1;

	names = { id, name };
	controls = { taskTabs };
	columns = { name, project.name, status.name, difficulty, deadLine, finishedAt, creator.name, executor.name };
}
