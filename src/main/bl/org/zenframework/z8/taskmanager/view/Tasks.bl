import org.zenframework.z8.base.form.Listbox;
import org.zenframework.z8.base.form.Tab;
import org.zenframework.z8.base.form.TabControl;
import org.zenframework.z8.base.table.Sql;
import org.zenframework.z8.base.table.Table;
import org.zenframework.z8.base.table.value.Aggregation;
import org.zenframework.z8.base.table.value.Field;
import org.zenframework.z8.base.table.value.GuidField;
import org.zenframework.z8.taskmanager.model.History;
import org.zenframework.z8.taskmanager.model.Person;
import org.zenframework.z8.taskmanager.model.Task;

[entry]
[displayName "Задачи"]
public class Tasks extends Task {
	
	[displayName "Наименование"] name;
	[displayName "Проект"] project.name;
	[displayName "Описание"] description;
	[displayName "Сложность"] difficulty;
	[displayName "Срок исполнения"] deadLine;
	[displayName "Выполнил"] finishedAt;
	[displayName "Создатель"] creator.name;
	[displayName "Исполнитель"] executor.name;
	
	name.editable = true;
	project.name.editable = true;
	status.name.editable = true;
	difficulty.editable = true;
	deadLine.editable = true; 
	finishedAt.editable = true;
	creator.name.editable = true; 
	executor.name.editable = true;
	
	public History history;
	[displayName "История изменений"] private Listbox historyList;
	
	
	historyList.query = history;
	historyList.link = history.taskId;
	historyList.columns = { history.createdAt, history.user.name, history.changedElement, history.newValue};
	historyList.sortFields = { history.createdAt };
	

	description.flex = 1;
	historyList.colSpan = 2;
	historyList.flex = 1;
	
	
	executor = class {
		virtual protected void beforeRead() {
			super.beforeRead();
			Person person;
			person.userId.aggregation = Aggregation.Array;
			if (!person.aggregate(Field[] { person.userId }, person.projectId == container.projectId.get()))
				throw "Пользователей нету";
			addWhere(Sql.inVector(recordId, person.userId.array()));
		}
	};
	

	
	virtual protected string[] getNameValue(Table table,GuidField id){
		table.readRecord(id.get(),Field[] {table.name});
		return {table.name.displayName(),table.name.get()};
	}
	virtual protected void afterUpdate(guid recordId) {
		super.afterUpdate(recordId);
		
		if (description.isChanged())
			return;
		
		History history;
		history.taskId = recordId;
		history.userId = user().id;
		
		
		Field[] elements = {name, difficulty, deadLine, projectId, statusId, creatorId, executorId};
		
		Table[] tables = {project, status, creator, executor};
		
		for (int i = 0;i < elements.size(); i += 1){
			
			if (elements[i].isChanged()){
				string className = elements[i].className();
				
				
				history.changedElement = elements[i].displayName();
					
				if (elements[i] != deadLine)
					history.newValue = (elements[i].toString() != "0" ) ? elements[i].toString(): "" ;
				else
					history.newValue = (deadLine.get() != date.Min) ? 
										deadLine.get().toString("dd.MM.YYYY hh:mm") : "";	
				
				string[] NameValue = getNameValue(tables[i-3],(GuidField)elements[i]);
				history.changedElement = NameValue[0];
				history.newValue = NameValue[1];
				
			}
		}

			history.create();
	}
	
	[displayName "История"]
	public Tab historyTab;
	historyTab.controls = { historyList } ;
	
	[displayName "Задача"]
	public Tab taskTab;	
	taskTab.controls = { name, project.name, status.name, difficulty, deadLine, finishedAt, creator.name, executor.name, description } ;
	taskTab.flex = 2;
	
	
	public TabControl taskTabs;
	taskTabs.tabs = { taskTab, historyTab };
	taskTabs.flex = 1;
	colCount = 1;
	
	names = { name };
	controls = { taskTabs };
	
	columns = { name, project.name, status.name, difficulty, deadLine, finishedAt, creator.name, executor.name };
	
}