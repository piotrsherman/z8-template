import org.zenframework.z8.base.table.RecordLock;
import org.zenframework.z8.base.table.Table;
import org.zenframework.z8.base.table.system.Users;
import org.zenframework.z8.base.table.value.DatetimeField;
import org.zenframework.z8.base.table.value.Field;
import org.zenframework.z8.base.table.value.IntField;
import org.zenframework.z8.base.table.value.Link;

[generatable]
[name "Task"]
public class Task extends Table{
	
	public Project project;
	[name "Project"] public Link projectId = project;

	public Users creator;
	[name "Creator"] public Link creatorId = creator;
	
	public Users executor;
	[name "Executor"] public Link executorId = executor;
	
	public Status status;
	[name "Status"] public Link statusId = status;
	
	[name "Difficulty"]
	public IntField difficulty;
	
	[name "Deadline"]
	public DatetimeField deadLine;
	
	[name "FinishedAt"]
	public DatetimeField finishedAt;
	
	
	
	private void access(bool onUpdate){
		guid userId = user().id;
		read(Field[] {recordId,creatorId,executorId}, this.recordId == recordId);
		while (next()){
			if (user().isAdministrator())
				userId = creatorId.get();
			if (creatorId.get() != userId && executorId.get() != userId)
				lock = RecordLock.Full;
			else if (creatorId.get() != userId && executorId.get() == userId)
				lock = RecordLock.Destroy;
			else lock = RecordLock.None;
			if (onUpdate)
				update(recordId.get());
		}
	}
	
	virtual protected void onReadAction(){	
		super.onReadAction();
		
		
		access(true);
	}
	virtual protected void onUpdateAction(guid recordId){
		super.onUpdateAction(recordId);
		
		access(false);
	}
	
	
	virtual protected void beforeCreate(guid recordId){
		super.beforeCreate(recordId);
		
		creatorId = user().id;
	}
	virtual protected void beforeUpdate(guid recordId){
		if (statusId.isChanged()){
			if (statusId.get() != Status.Done) 
				finishedAt = date.Min;				
			else finishedAt = date.now(); 
		}
	}
}
